#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var coap = require('../coap')
var debug = require('debug')('demo:server');
var http = require('http');
let I18n = require('i18n').I18n
let SettingUtils = require('../libs/Setting')

global.config = require('../config');
global.i18n = new I18n(global.config.i18n)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.server.port);
var coapPort = normalizePort(process.env.COAP || config.coap.port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

//start socket.io
const serverSocketIO = require('../socketio')
const SeriesDataWriter = require("../libs/SeriesDataWriter");
serverSocketIO(server)
//end of socket.io

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log(`HTTP Server listening at port ${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

coap.listen(coapPort, function () {
  console.log(`COAP Server listening at port ${coapPort}`)
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

require('../libs/Date')();

async function initialize () {
  try {
    let db = await require('../database')(
        global.config.database.postgres.dbname,
        global.config.database.postgres.username,
        global.config.database.postgres.password,
        global.config.database.postgres.config
    )
    app.db = global.db = db
    await global.db.sync();
    global.seriesDataWriter = new SeriesDataWriter(db)

    await app.startAllJobs()

    global.i18n.setLocale(await SettingUtils.getLocale())
  }
  catch(err) {
    console.log(err)
  }
}

initialize()